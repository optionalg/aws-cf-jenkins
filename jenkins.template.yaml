AWSTemplateFormatVersion: 2010-09-09
Description: 'A simple Jenkins-CI stack.'

Parameters:
  # Required parameters (added to the parameters.json.dist).
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: 'Key pairs, nothing else.'
  HostedZoneName:
    Type: String
    Description: 'Hosted zone to create a sub domain in (without a trailing dot).'
  SubDomain:
    Type: String
    Description: 'The sub domain to be used for jenkins.'

  # Optional parameters.
  MasterEBSDiskSpace:
    Type: String
    Description: 'Jenkins master EBS disk space in GB'
    Default: 60
  MasterInstanceType:
    Type: String
    Description: "Jenkins master instance type."
    Default: t2.micro
    AllowedValues: ["t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "f1.2xlarge", "f1.16xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "x1.16large", "x1.32xlarge", "x1e.16xlarge"]
    ConstraintDescription: "must be a valid EC2 instance type."
  SlaveEBSDiskSpace:
    Type: String
    Description: 'Jenkins master EBS disk space in GB'
    Default: 60
  SlaveInstanceType:
    Type: String
    Description: "Jenkins master instance type."
    Default: t2.micro
    AllowedValues: ["t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "t2.xlarge", "t2.2xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "m4.16xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "f1.2xlarge", "f1.16xlarge", "g3.4xlarge", "g3.8xlarge", "g3.16xlarge", "i3.large", "i3.xlarge", "i3.2xlarge", "i3.4xlarge", "i3.8xlarge", "i3.16xlarge", "p2.xlarge", "p2.8xlarge", "p2.16xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "r4.large", "r4.xlarge", "r4.2xlarge", "r4.4xlarge", "r4.8xlarge", "r4.16xlarge", "x1.16large", "x1.32xlarge", "x1e.16xlarge"]
    ConstraintDescription: "must be a valid EC2 instance type."
  SlaveInstancesNumber:
    Type: Number
    Description: "The number of available slave instances. 0 for disable slaves."
    Default: 2
# \Parameters

Mappings:
  # Region to Ubuntu 17.04 Canonical image map
  AWSRegion2AMI:
    us-east-1:
      AMI: ami-cd0f5cb6
    us-east-2:
      AMI: ami-10547475
    us-west-1:
      AMI: ami-09d2fb69
    us-west-2:
      AMI: ami-6e1a0117
    ca-central-1:
      AMI: ami-9818a7fc
    eu-central-1:
      AMI: ami-1e339e71
    eu-west-1:
      AMI: ami-785db401
    eu-west-2:
      AMI: ami-996372fd
    ap-southeast-1:
      AMI: ami-6f198a0c
    ap-southeast-2:
      AMI: ami-e2021d81
    ap-northeast-1:
      AMI: ami-ea4eae8c
    ap-northeast-2:
      AMI: ami-d28a53bc
    ap-south-1:
      AMI: ami-099fe766
    sa-east-1:
      AMI: ami-10186f7c
# \Mappings

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: 'Name'
        Value: !Join ['', [!Ref "AWS::StackName", '-vpc']]

  VpcInternetGateway:
    Type: AWS::EC2::InternetGateway

  VpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref VpcInternetGateway
      VpcId: !Ref Vpc

  #<public-subnet>
  VpcSubnetPublic:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: '10.0.0.0/24'
      MapPublicIpOnLaunch: 'false'
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: !Ref AWS::Region

  VpcRouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
      - Key: 'Name'
        Value: !Join ['-', [!Ref "AWS::StackName", 'routetable-public']]

  VpcRoutePublicInternetTraffic:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref VpcRouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VpcInternetGateway

  VpcSubnetPublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VpcRouteTablePublic
      SubnetId: !Ref VpcSubnetPublic
  #</public-subnet>

  #<private-subnet>
  VpcSubnetPrivate:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: '10.0.1.0/24'
      MapPublicIpOnLaunch: 'false'
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: !Ref AWS::Region

  VpcRouteTablePrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
      - Key: 'Name'
        Value: !Join ['-', [!Ref "AWS::StackName", 'routetable-private']]

  VpcRoutePrivateInternetTraffic:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref VpcRouteTablePrivate
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref JenkinsMaster

  VpcSubnetPrivateRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref VpcRouteTablePrivate
      SubnetId: !Ref VpcSubnetPrivate
  #</private-subnet>

  #<security-groups>
  SecurityGroupAllowNatTraffic:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Allow traffic from instances in private subnets.'
      VpcId: !Ref Vpc
      SecurityGroupIngress:
      - IpProtocol: -1
        CidrIp: 10.0.1.0/24

  SecurityGroupJenkinsMaster:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Enable all internal traffic and ssh traffic for external clients'
      VpcId: !Ref Vpc
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0

  SecurityGroupJenkinsSlaves:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: Security group for mount target
      SecurityGroupIngress:
      - IpProtocol: -1
        SourceSecurityGroupId: !Ref SecurityGroupJenkinsMaster

  SecurityGroupMountTarget:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: Security group for mount target
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '2049'
        ToPort: '2049'
        SourceSecurityGroupId: !Ref SecurityGroupJenkinsMaster
      - IpProtocol: tcp
        FromPort: '2049'
        ToPort: '2049'
        SourceSecurityGroupId: !Ref SecurityGroupJenkinsSlaves
  #</security-groups>
  ElasticIpJenkinsMaster:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref JenkinsMaster
      Domain: !Ref Vpc
  DnsRecordJenkinsMaster:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Join ['', [!Ref HostedZoneName, .]]
      Name: !Join ['', [!Ref SubDomain, ., !Ref HostedZoneName, .]]
      Type: 'A'
      TTL: 300
      ResourceRecords:
      - !Ref ElasticIpJenkinsMaster
  FileSystemJenkinsNodes:
    Type: AWS::EFS::FileSystem
    Properties:
      FileSystemTags:
        - Key: Name
          Value: !Join ['', [!Ref "AWS::StackName", ., 'jenkins-nfs']]
  FileSystemMountTarget:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystemJenkinsNodes
      SubnetId: !Ref VpcSubnetPublic
      SecurityGroups:
      - !Ref SecurityGroupMountTarget
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
            - "ec2.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Path: "/"
      Policies:
      - PolicyName: "AllowModifyInstanceAttribute"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: "Allow"
            Action:
            - "ec2:ModifyInstanceAttribute"
            Resource: "*"
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref InstanceRole
  JenkinsMaster:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          initInstance:
          - initializeOS
          - installJenkins
          - installNginx
          - installDocker
        initializeOS:
          files:
            /opt/jenkins/mount-nfs.sh:
              content: !Sub |
                #!/bin/bash -x
                apt-get update && apt-get install -y nfs-common
                mkdir /mnt/efs
                mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 ${FileSystemJenkinsNodes}.efs.${AWS::Region}.amazonaws.com:/ /mnt/efs
              mode: "000744"
            /opt/jenkins/setup-nat.sh:
              content: !Sub |
                #!/bin/bash +x

                echo 1 > /proc/sys/net/ipv4/ip_forward
                echo 0 > /proc/sys/net/ipv4/conf/eth0/send_redirects

                # Allow package forwarding
                /sbin/iptables -t nat -A POSTROUTING -o eth0 -s 0.0.0.0/0 -j MASQUERADE
                /sbin/iptables-save > /etc/iptables/rules.v4

                apt-get install -y iptables-persistent

                mkdir -p /etc/sysctl.d/
                cat <<EOF > /etc/sysctl.d/nat.conf
                net.ipv4.ip_forward = 1
                net.ipv4.conf.eth0.send_redirects = 0
                EOF

                # Fetch instance metadata (see http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html)
                instanceId=$(curl http://169.254.169.254/latest/meta-data/instance-id)

                # Disable source/dest check on jenkins master.
                aws ec2 modify-instance-attribute --region ${AWS::Region} --instance-id $instanceId --no-source-dest-check
              mode: "000744"
          commands:
            01-mount-efs:
              command: "/opt/jenkins/mount-nfs.sh"
            02-setup-nat:
              command: "/opt/jenkins/setup-nat.sh"
        installJenkins:
          files:
            /opt/jenkins/install-jenkins.sh:
              content: !Sub |
                #!/bin/bash -x

                # Install Jenkins from apt repo
                wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add -
                echo "deb https://pkg.jenkins.io/debian-stable binary/" > /etc/apt/sources.list.d/jenkins.list
                sudo apt-get update && sudo apt-get install -y jenkins rsync

                # Change configuration and restart Jenkins.
                echo 'JENKINS_ARGS="--webroot=/var/cache/$NAME/war --httpPort=$HTTP_PORT --httpListenAddress=127.0.0.1"' >> /etc/default/jenkins
                service jenkins restart

                # Build ssh key pair and place the public key on nfs
                sudo -H -u jenkins ssh-keygen -t rsa -q -f /var/lib/jenkins/.ssh/id_rsa -N ''
                cp /var/lib/jenkins/.ssh/id_rsa.pub /mnt/efs/master_rsa.pub

                # Register cronjob for backing up jenkins data every 15 Minutes
                echo '*/15 * * * * /opt/jenkins/backup-jenkins.sh' > /tmp/cronjob.txt
                crontab /tmp/cronjob.txt
              mode: "000744"
            /opt/jenkins/backup-jenkins.sh:
              content: !Sub |
                #!/bin/bash -x
                rsync -gorpt /var/lib/jenkins /mnt/efs/jenkins-backup
              mode: "000744"
            /opt/jenkins/restore-jenkins.sh:
              content: !Sub |
                #!/bin/bash -x
                if [ ! -f "/var/lib/jenkins/config.xml" ]; then
                  if [ -d "/mnt/efs/jenkins-backup/jenkins" ]; then
                    rsync -gorpt /mnt/efs/jenkins-backup/jenkins /var/lib
                  fi
                fi
              mode: "000744"
          commands:
            01-restore-jenkins-from-nfs:
              command: "/opt/jenkins/restore-jenkins.sh"
            02-post-install-script:
              command: "/opt/jenkins/install-jenkins.sh"
        installNginx:
          packages:
            apt:
              nginx: []
          files:
            /opt/jenkins/obtain-certificate.sh:
              content: !Sub |
                #!/bin/bash -x

                # Install certbot (letsencrypt)
                add-apt-repository -y ppa:certbot/certbot
                apt-get update && apt-get install -y python-certbot-nginx

                # Update DH parameters
                openssl dhparam -rand /dev/urandom -outform pem -out /etc/ssl/certs/dhparam.pem 2048

                # Install certificate
                certbot --nginx -n --agree-tos --email admin@${HostedZoneName} -d ${SubDomain}.${HostedZoneName}
                echo '0 0 * * * /usr/bin/certbot renew --quiet' > /tmp/cronjob.txt
                crontab /tmp/cronjob.txt

                # Restart nginx
                service nginx restart
              mode: "000744"
            /etc/nginx/sites-enabled/jenkins:
              content: !Sub |
                server {
                  listen 80;
                  server_name ${SubDomain}.${HostedZoneName};
                  location / {
                    include /etc/nginx/proxy_params;
                    proxy_pass          http://localhost:8080;
                    proxy_read_timeout  90s;
                    # Fix potential "It appears that your reverse proxy set up is broken" error.
                    proxy_redirect      http://localhost:8080 https://${SubDomain}.${HostedZoneName};
                  }
                  ssl_dhparam /etc/ssl/certs/dhparam.pem;
                }
          commands:
            01-post-install-script:
              command: "/opt/jenkins/obtain-certificate.sh"
        installDocker:
          files:
            /opt/jenkins/install-docker.sh:
              content: !Sub |
                #!/bin/bash -x

                apt-get update
                apt-get install -y jq apt-transport-https ca-certificates curl software-properties-common

                # Add apt repo
                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
                add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

                # Install docker
                apt-get update && apt-get install -y docker-ce
                usermod -aG docker jenkins

                # Install docker-compose
                version=$(curl https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)
                curl -L https://github.com/docker/compose/releases/download/$version/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
                chmod +x /usr/local/bin/docker-compose
              mode: "000744"
          commands:
            01-post-install-script:
              command: "/opt/jenkins/install-docker.sh"
    Properties:
      BlockDeviceMappings:
      - DeviceName: "/dev/sdb"
        Ebs:
          VolumeSize: !Ref MasterEBSDiskSpace
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !FindInMap [ AWSRegion2AMI, !Ref "AWS::Region", "AMI" ]
      InstanceType: !Ref MasterInstanceType
      KeyName: !Ref KeyName
      SecurityGroupIds:
      - Ref: SecurityGroupJenkinsMaster
      - Ref: SecurityGroupAllowNatTraffic
      SubnetId: !Ref VpcSubnetPublic
      Tags:
      - Key: 'Name'
        Value: !Join ['', [!Ref "AWS::StackName", ., 'jenkins-master']]
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -xe
          export DEBIAN_FRONTEND='noninteractive'

          # APT update and package installation
          apt-get update
          apt-get -y -o Dpkg::Options::='--force-confdef' -o Dpkg::Options::='--force-confold' upgrade
          apt-get install -y python-setuptools python-pip
          pip install --upgrade pip

          # Install cfn-init and awscli for Ubuntu
          easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          pip install awscli

          ln -s $(pwd)/aws-cfn-bootstrap-latest/init/ubuntu/cfn-hup /etc/init.d/cfn-hup
          cfn-init -v --stack ${AWS::StackName} --resource JenkinsMaster --region ${AWS::Region} -c initInstance
          cfn-signal -e $? --stack ${AWS::StackName} --resource JenkinsMaster --region ${AWS::Region}
  LaunchConfigurationJenkinsSlaves:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: JenkinsMaster
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          initInstance:
          - mountEFS
          - installDocker
          - installJenkinsSlave
        mountEFS:
          files:
            /opt/jenkins/mount-nfs.sh:
              content: !Sub |
                #!/bin/bash -x
                apt-get update && apt-get install -y nfs-common
                mkdir /mnt/efs
                mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2 ${FileSystemJenkinsNodes}.efs.${AWS::Region}.amazonaws.com:/ /mnt/efs
              mode: "000744"
          commands:
            01-mount-efs:
              command: "/opt/jenkins/mount-nfs.sh"
        installDocker:
          files:
            /opt/jenkins/install-docker.sh:
              content: !Sub |
                #!/bin/bash -x

                apt-get update
                apt-get install -y jq apt-transport-https ca-certificates curl software-properties-common

                # Add apt repo
                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
                add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

                # Install docker
                apt-get update && apt-get install -y docker-ce
                usermod -aG docker jenkins

                # Install docker-compose
                version=$(curl https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)
                curl -L https://github.com/docker/compose/releases/download/$version/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
                chmod +x /usr/local/bin/docker-compose
              mode: "000744"
          commands:
            01-post-install-script:
              command: "/opt/jenkins/install-docker.sh"
        installJenkinsSlave:
          files:
            /opt/jenkins/install-jenkins-slave.sh:
              content: !Sub |
                #!/bin/bash -x

                apt-get update
                apt-get install -y git default-jre wget

                useradd -m jenkins
                sudo -u jenkins mkdir /home/jenkins/.ssh
                cat /mnt/efs/master_rsa.pub > /home/jenkins/.ssh/authorized_keys
                chown jenkins.jenkins /home/jenkins/.ssh/authorized_keys

                # Fetch Jenkins jars.
                wget -O /opt/jenkins/jenkins-cli.jar --no-check-certificate https://${JenkinsMaster.PrivateIp}/jnlpJars/jenkins-cli.jar
                wget -O /opt/jenkins/slave.jar --no-check-certificate https://${JenkinsMaster.PrivateIp}/jnlpJars/slave.jar
              mode: "000744"
            /opt/jenkins/start-slave.sh:
              content: !Sub |
                #!/bin/sh
                exec java -jar /opt/jenkins/slave.jar
              mode: "000744"
          commands:
            01-post-install-script:
              command: "/opt/jenkins/install-jenkins-slave.sh"
    Properties:
      AssociatePublicIpAddress: false
      BlockDeviceMappings:
      - DeviceName: "/dev/sdb"
        Ebs:
          VolumeSize: !Ref SlaveEBSDiskSpace
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !FindInMap [ AWSRegion2AMI, !Ref "AWS::Region", "AMI" ]
      InstanceType: !Ref SlaveInstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
      - !Ref SecurityGroupJenkinsSlaves
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -xe
          export DEBIAN_FRONTEND='noninteractive'

          # APT update and package installation
          apt-get update
          apt-get -y -o Dpkg::Options::='--force-confdef' -o Dpkg::Options::='--force-confold' upgrade
          apt-get install -y python-setuptools

          # Install cfn-init for Ubuntu
          easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz

          ln -s $(pwd)/aws-cfn-bootstrap-latest/init/ubuntu/cfn-hup /etc/init.d/cfn-hup
          cfn-init -v --stack ${AWS::StackName} --resource LaunchConfigurationJenkinsSlaves --region ${AWS::Region} -c initInstance
          cfn-signal -e $? --stack ${AWS::StackName} --resource LaunchConfigurationJenkinsSlaves --region ${AWS::Region}
  AutoScalingGroupJenkinsSlaves:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - !Ref VpcSubnetPrivate
      LaunchConfigurationName: !Ref LaunchConfigurationJenkinsSlaves
      MinSize: !Ref SlaveInstancesNumber
      MaxSize: !Ref SlaveInstancesNumber
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref "AWS::StackName", 'jenkins-slave']]
        PropagateAtLaunch: 'true'
Outputs:
  MasterIPAddress:
    Description: The Jenkins master IP address.
    Value: !Ref ElasticIpJenkinsMaster
  MasterHostName:
    Description: The Jenkins master hostname.
    Value: !Join ['.', [!Ref SubDomain, !Ref HostedZoneName]]